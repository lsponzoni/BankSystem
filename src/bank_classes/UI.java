package bank_classes;

import java.io.InputStreamReader;


import java.text.ParseException;
import java.text.SimpleDateFormat;
import java.util.Date;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : UI.java
//  @ Date : 01/06/2013
//  @ Author : 
//
//
import java.util.Scanner;

import bankexceptions.InvalidTransaction;
import bankexceptions.NotFoundException;

public abstract class UI {
	protected static final String CLEAR_SCREEN = "\000C";
	protected static final String CONFIRM_PREFFIX = "Do you really want to ";
	protected static final String INVALID_TRANSACTION = null;
	protected static final String LOGIN_OK = "Login realizado.";
	private static final String OPERACAO_FINALIZADA = null;
	protected static final String PROMPT = "\n=> ";
	protected static final String SELECT_ONE_FROM_BELLOW_LIST = "Escolha uma opção abaixo";
	protected static final String USER_NOT_FOUND = "Usuário não encontrado!";
	protected static final String WRONG_PASSWORD = "Senha incorreta!";
	protected static final String Y_OR_N_PREFFIX_WORD_REGEX = "[YyNn].*";
	private static boolean yes_or_no(String yes_or_no){
		return (yes_or_no.toLowerCase().startsWith("y"));
	}
	protected Branch access_branch;
	protected User current_user;
	protected Bank facade;
	private boolean logged_in;

	private boolean system_on;

	public UI(Bank bank, Branch branch) {
		// Bank and branch data addition
		this.access_branch = branch;
		this.facade = bank;
		logged_in = false;
		system_on = false;
	}

	public String balance() {
		String user;
		Client client;
		display("Digite o nome do usuario: \n");
		user = get_string(PROMPT);
		try{
			client = this.facade.get_client(user, this.access_branch.get_code());
		}
		catch(NotFoundException e){
			return USER_NOT_FOUND;
		}
		Date dateNow = new Date();
		return "Seu saldo é " + client.get_account().get_balance().toString() +
				"\n Visto às " + dateNow.toString();
	}

	public boolean confirm(String question){
		boolean valid_answer,answer;
		String input = "y";		
		do{
			input = get_string(CONFIRM_PREFFIX + question);
			valid_answer = input.matches(Y_OR_N_PREFFIX_WORD_REGEX);
		}while(!valid_answer);
		answer = yes_or_no(input);
		return answer;
	}

	public String deposit() {
		String ammount;
		String cashParcelId;
		String user;
		Client client;
		display("Digite o nome do usuario a receber o deposito: \n");
		user = get_string(PROMPT);
		try{
			client = this.facade.get_client(user, this.access_branch.get_code());
		}
		catch(NotFoundException e){
			return USER_NOT_FOUND;
		}
		display("Digite a quantia a ser depositada: \n");
		ammount = get_string(PROMPT);
		display("Digite o codigo do envelope: \n");
		cashParcelId = get_string(PROMPT);
		try{
			this.facade.deposit(ammount, cashParcelId, access_branch, client.get_account());
		}
		catch(InvalidTransaction e){
			return INVALID_TRANSACTION;
		}
		return OPERACAO_FINALIZADA;
	}

	private void disable_operations() {
		display(CLEAR_SCREEN);
	}

	public void display(String message){
		System.out.println(message);		
	}

	public String execute(char optCode){
		String message;
		if(MenuOptions.BALANCE.compare(optCode)){
			message = balance();
		} else if(MenuOptions.DEPOSIT.compare(optCode)){
			message = deposit();
		} else if(MenuOptions.EXIT.compare(optCode)){
			message = exit();
		}else if(MenuOptions.HISTORY.compare(optCode)){
			message = transaction_history();
		} else if(MenuOptions.LOGIN.compare(optCode)){
			message = login();
		} else if(MenuOptions.LOGOUT.compare(optCode)){
			message = logout();
		} else if(MenuOptions.NEW_ACCOUNT.compare(optCode)){
			message = "new account";
		} else if(MenuOptions.TRANSFER.compare(optCode)){
			message = transfer();
		} else if(MenuOptions.WITHDRAW.compare(optCode)){
			message = withdraw();
		} else {
			message = "Nenhuma operação combina com a opção selectionada.";
		}
		return message;
	}


	protected abstract User exist_at_system(String username,String branch) throws NotFoundException;
	private String exit(){
		return "Exit " + access_branch.get_code() + "\n";
	}

	protected abstract MenuOptions[] get_logged_menu_options();
	public void get_month_from_user() {
		//TODO this is not void
		//deveria pedir o mês de alguma forma
	}

	char get_next_operation(MenuOptions[] restricted_to_options){
		String input;
		char op_value;

		do {
			String menu = MenuOptions.menu(SELECT_ONE_FROM_BELLOW_LIST, restricted_to_options);
			input = get_string(menu);
			op_value = input.toUpperCase().charAt(0);
		}while(! MenuOptions.validOption(op_value,restricted_to_options));

		return op_value;
	}

	public Date[] get_period_from_user() {
		Date from=null, to=null;
		Date[] period = new Date[2];
		SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
		String date;
		display("Informe o período a ser vizualizado:");

		while (from == null){
			date = get_string("Data de início (aaaa-mm-dd): \n");
			try{
				from = sdf.parse(date);
			}catch(ParseException e)
			{
				display("Entrada Invalida!");
				display(CLEAR_SCREEN);
				from = null;
			}
		}

		while (to == null){
			date = get_string("Data final (aaa-mm-dd): \n");
			try{
				to = sdf.parse(date);
			}catch(ParseException e)
			{
				display("Entrada Invalida!");
				display(CLEAR_SCREEN);
				to = null;
			}
		}

		period[0] = from;
		period[1] = to;

		return period;

	}



	public  String get_string(String question){
		InputStreamReader cin = new InputStreamReader(System.in);
		Scanner in = new Scanner(cin);
		display(question);
		display(PROMPT);
		String input = in.nextLine();
		in.close();
		return input;
	}

	private MenuOptions[] get_unlogged_menu_options(){
		MenuOptions[] restrictions = { MenuOptions.LOGIN, MenuOptions.EXIT };
		return restrictions;
	}

	public boolean isLoggedIn() {
		return logged_in;
	}
	private boolean isSystemOn() {
		return system_on == true;
	}
	public void logged_menu_loop(){
		while(isLoggedIn()){
			user_interaction(get_logged_menu_options());
		}
	}

	public String login(){
		String loginUser = "Digite o nome de usuario: \n";
		String passwUser = "Digite sua senha: \n";
		String username = get_string(loginUser);
		String pass = get_string(passwUser);
		display(CLEAR_SCREEN);
		return login(username, this.access_branch.get_code(), pass);
	}	
	protected String login(String username, String branch, String password) {
		String msg;
		try{
			current_user = exist_at_system(username, branch);
			if(current_user.passwordMatch(password)) {
				logged_in = true;
				msg = LOGIN_OK;
			} else {
				msg = WRONG_PASSWORD;
			}
		}catch(NotFoundException excep){
			msg = USER_NOT_FOUND;
		}
		return msg;
	}
	protected String logout() {
		logged_in = confirm("logout");
		disable_operations();
		return "Operação Finalizada";
	}

	protected void set_log_in(){
		logged_in = true;
	}

	private String transaction_history() {
		String user;
		Client client;
		History history;
		String opt;
		user = get_string("Digite o nome do usuario: \n");
		try{
			client = this.facade.get_client(user, this.access_branch.get_code());
		}
		catch(NotFoundException e){
			return USER_NOT_FOUND;
		}
		history = client.get_account().get_history();
		display(SELECT_ONE_FROM_BELLOW_LIST);
		do{
			display("1> Visualizar historico do mes anterior \n" +
					"2> Selecionar periodo a ser visualizado");
			opt = get_string("");
		}while(!opt.equals("1") && !opt.equals("2"));

		if(opt.equals("1"))
		{
			//parte complicada
		}
		if(opt.equals("2"))
		{
			Date[] period = new Date[2];
			period = get_period_from_user();
			try{
				return history.get_transactions(period[0], period[1]).toString();
			}
			catch(InvalidTransaction e)
			{
				return INVALID_TRANSACTION;
			}
		}
		return opt;

	}

	public String transfer() {
		String ammount;
		String user;
		Client client;
		String to_account_id;
		String to_branch_id;

		display("Digite o nome do usuario: \n");
		user = get_string(PROMPT);
		try{
			client = this.facade.get_client(user, this.access_branch.get_code());
		}
		catch(NotFoundException e){
			return USER_NOT_FOUND;
		}

		display("Digite o codigo da conta destino: \n");
		to_account_id = get_string(PROMPT);

		display("Digite o codigo da agencia destino: \n");
		to_branch_id = get_string(PROMPT);

		display("Digite a quantia a ser transferida: \n");
		ammount = get_string(PROMPT);
		try{
			this.facade.transfer(ammount, to_account_id, to_branch_id, access_branch, client.get_account());
		}
		catch(NotFoundException e){
			return USER_NOT_FOUND;
		}
		catch(InvalidTransaction e){
			return INVALID_TRANSACTION;
		}
		return OPERACAO_FINALIZADA;
	}

	public void unlogged_menu_loop(){
		while(isSystemOn()){
			user_interaction(get_unlogged_menu_options());
		}
	}

	protected void unset_log_in(){
		logged_in = false;
	}

	private void user_interaction(MenuOptions[] restrict_to_options){
		char operation_id = get_next_operation(restrict_to_options);
		String execution_result = execute(operation_id);
		display(execution_result);
	}

	public String withdraw() {
		String ammount;
		String user;
		Client client;
		display("Digite o nome do usuario a fazer o saque: \n");
		user = get_string(PROMPT);
		try{
			client = this.facade.get_client(user, this.access_branch.get_code());
		}
		catch(NotFoundException e){
			return USER_NOT_FOUND;
		}
		display("Digite a quantia a ser retirada: \n");
		ammount = get_string(PROMPT);
		return this.facade.withdraw(ammount, access_branch, client.get_account());
	}
}