package bank_classes;

import java.util.Calendar;
import java.util.Date;

import bankexceptions.InvalidTransaction;
import bankexceptions.NotFoundException;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : atmUI.java
//  @ Date : 01/06/2013
//  @ Author : 
//
//

public class AtmUI extends UI {
	public AtmUI(Bank bank, Branch branch){
		super(bank, branch);
	}
	
	protected Client exist_at_system(String username,String branch) throws NotFoundException{
		return facade.get_client(username, branch);
	}

	protected String call_login(String username, String password){
		String branch_code;
		branch_code = get_string("Digite sua agÃªncia.\n");
		return login(username, branch_code, password);
	}

	public String deposit() {
		String ammount;
		String cashParcelId;
		ammount = get_string("Digite a quantia a ser depositada: ");
		cashParcelId = get_string("Digite o codigo do envelope: ");
		this.facade.deposit(ammount, cashParcelId, access_branch, ((Client) current_user).get_account());
		return "Fim\n";
	}

	
	public String withdraw() {
		String ammount;
		ammount = get_string("Digite a quantia a ser depositada: \n");
		return this.facade.withdraw(ammount, access_branch, ((Client) current_user).get_account());
	}
	
	public String transfer() {
		String ammount;
		String to_account_id;
		String to_branch_id;

		to_account_id = get_string("Digite o codigo da conta destino: \n");
		to_branch_id = get_string("Digite o codigo da agencia destino: \n");
		ammount = get_string("Digite a quantia a ser transferida: \n");
				
		return 	this.facade.transfer(ammount, to_account_id, to_branch_id, access_branch, ((Client) current_user).get_account());
	}

	@Override
	protected MenuOptions[] get_logged_menu_options() {
		MenuOptions[] LOGGED_MENU_OPTIONS = {MenuOptions.LOGOUT, 
				   MenuOptions.BALANCE, 
				   MenuOptions.BRANCH, 
				   MenuOptions.DEPOSIT,
				   MenuOptions.HISTORY,
				   MenuOptions.TRANSFER,
				   };
		return LOGGED_MENU_OPTIONS;
	}

	@Override
	protected String add_new_account_to_system() {
		return "Not supported";
	}

	@Override
	protected String transaction_history() {
		String user;
		Client client = (Client) current_user;
		History history;
		String opt;
		Calendar[] period = new Calendar[2];

		history = client.get_account().get_history();
		display("Escolha uma operacao abaixo");
		do{
			display("1> Visualizar historico do mes anterior \n" +
				"2> Selecionar periodo a ser visualizado");
			opt = get_string();
		} while(!opt.equals("1") && !opt.equals("2"));
		
		if(opt.equals("1")) {
			period = get_month_from_user();
		}
		if(opt.equals("2"))	{			
			period = get_period_from_user();
		}
		try{
			return history.get_transactions(period[0], period[1]).toString();
		}
		catch(InvalidTransaction e)		{
			return "Transacao invalida.";
		}
	
	}


	@Override
	protected String balance() {
		Date dateNow = new Date();
		return "Seu saldo $ " + ((Client) current_user).get_account().get_balance().toString() +
				"\n Visto em " + dateNow.toString();
	}
}
