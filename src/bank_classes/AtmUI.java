package bank_classes;

import bankexceptions.InvalidTransaction;
import bankexceptions.NotFoundException;
//
//
//  Generated by StarUML(tm) Java Add-In
//
//  @ Project : Untitled
//  @ File Name : atmUI.java
//  @ Date : 01/06/2013
//  @ Author : 
//
//

public class AtmUI extends UI {
	private static final String INVALID_TRANSACTION = "Transação Inválida";
	private static final String OPERACAO_FINALIZADA = "Fim\n";
	private static final String DIGITE_SUA_AGENCIA = "Digite sua agência.\n";

	public AtmUI(Bank bank, Branch branch){
		super(bank, branch);
	}
	
	protected Client exist_at_system(String username,String branch) throws NotFoundException{
		return facade.get_client(username, branch);
	}

	protected String call_login(String username, String password){
		String branch_code;
		branch_code = get_string(DIGITE_SUA_AGENCIA);
		return login(username, branch_code, password);
	}

	public String deposit() {
		String ammount;
		String cashParcelId;
		ammount = get_string("Digite a quantia a ser depositada: ");
		cashParcelId = get_string("Digite o codigo do envelope: ");
		try{
			this.facade.deposit(ammount, cashParcelId, access_branch, ((Client) current_user).get_account());
		}
		catch(InvalidTransaction e){
			return INVALID_TRANSACTION;
		}
		return OPERACAO_FINALIZADA;
	}

	
	public String withdraw() {
		String ammount;
		ammount = get_string("Digite a quantia a ser depositada: \n");
		return this.facade.withdraw(ammount, access_branch, ((Client) current_user).get_account());
	}
	
	public String transfer() {
		String ammount;
		String to_account_id;
		String to_branch_id;

		to_account_id = get_string("Digite o codigo da conta destino: \n");
		to_branch_id = get_string("Digite o codigo da agencia destino: \n");
		ammount = get_string("Digite a quantia a ser transferida: \n");
		
		try{
			this.facade.transfer(ammount, to_account_id, to_branch_id, access_branch, ((Client) current_user).get_account());
		}
		catch(NotFoundException e){
			return USER_NOT_FOUND;
		}
		catch(InvalidTransaction e){
			return INVALID_TRANSACTION;
		}
		
		return OPERACAO_FINALIZADA;
	}

	@Override
	protected MenuOptions[] get_logged_menu_options() {
		MenuOptions[] LOGGED_MENU_OPTIONS = {MenuOptions.LOGOUT, 
				   MenuOptions.BALANCE, 
				   MenuOptions.BRANCH, 
				   MenuOptions.DEPOSIT,
				   MenuOptions.HISTORY,
				   MenuOptions.TRANSFER,
				   };
		return LOGGED_MENU_OPTIONS;
	}

	@Override
	protected String add_new_account_to_system() {
		return "Not supported";
	}
}
